{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","pages/Chatpage.js","App.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","height","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","bg","color","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","borderColor","borderWidth","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","w","m","borderRadius","fontSize","fontFamily","fontWeight","textShadow","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","colorScheme","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageReceived","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5dabea31.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Create a new context for chat-related state\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState(); // State for storing the currently selected chat\r\n  const [user, setUser] = useState(); // State for storing user information\r\n  const [notification, setNotification] = useState([]); // State for storing chat notifications\r\n  const [chats, setChats] = useState(); // State for storing chat data\r\n\r\n  const history = useHistory(); // Access the browser's history object\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\")); // Retrieve user information from local storage\r\n    setUser(userInfo); // Set the user state with the retrieved information\r\n\r\n    if (!userInfo) history.push(\"/\"); // Custom hook for accessing chat-related state from the context\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for accessing chat-related state from the context\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  // State variables\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n\r\n  // Access the browser history object for navigation\r\n  const history = useHistory();\r\n  // Get the setUser function from the ChatState context\r\n  const { setUser } = ChatState();\r\n\r\n  // Submit form handler\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    // Validate email and password\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      // Send a login request to the server\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // Display a success toast message\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      // Set the user data in the context\r\n      setUser(data);\r\n      // Store the user info in localStorage\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      // Redirect to the /chats route\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      // Display an error toast message\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\" height=\"400px\"   >\r\n      <FormControl id=\"email\" isRequired >\r\n    \r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n           {/* Toggle password visibility button */}\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      {/* Login button */}\r\n      <Button\r\n        bg=\"#d9fff8ff\"\r\n        color=\"black\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n           {/* Set guest credentials button */}\r\n      <Button\r\n        variant=\"solid\"\r\n        bg=\"#aa7bc3ff\"\r\n        color=\"black\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Set Guest Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  //// State variables to store form input values and loading state\r\n  const [show, setShow] = useState(false); // Show or hide password toggle\r\n  const handleClick = () => setShow(!show); // Toggle password visibility\r\n  const toast = useToast(); // Toast notification utility from Chakra UI\r\n  const history = useHistory(); // History object for programmatic navigation\r\n\r\n  const [name, setName] = useState(); // State variable for name input\r\n  const [email, setEmail] = useState(); // State variable for email input\r\n  const [confirmpassword, setConfirmpassword] = useState(); // State variable for confirm password input\r\n  const [password, setPassword] = useState(); // State variable for confirm password input\r\n  const [pic, setPic] = useState(); // State variable for picture input\r\n  const [picLoading, setPicLoading] = useState(false); // State variable for picture loading state\r\n\r\n  const submitHandler = async () => {\r\n    // Handle form submission\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      // Input validation: check if all fields are filled\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      // Input validation: check if password and confirm password match\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      // Send a POST request to register the user\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      // Display success toast notification, store user info in local storage, and navigate to chat page\r\n\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      // Display error toast notification\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    // Function to handle picture upload\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      // Input validation: check if an image is selected\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      // Check if selected file is an image (JPEG or PNG)\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"a1v5fked\");\r\n      data.append(\"cloud_name\", \"dvdlowjhx\");\r\n      // Upload image to Cloudinary using Fetch API\r\n      fetch(\"https://api.cloudinary.com/v1_1/dvdlowjhx/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          // Set the picture URL and stop the loading state\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      // Input validation: unsupported file type\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n        variant=\"solid\"\r\n        bg=\"#d9fff8ff\"\r\n        color=\"black\"\r\n        borderColor=\"black\" // Added border color\r\n        borderWidth=\"1px\" // Added border width\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Check if the user is already logged in\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    // Redirect to the /chats route if the user is logged in\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent >\r\n      {/* Logo */}\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"rgba(0, 0, 0, 0.3)\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"48px\" fontFamily=\"Montserrat\"  color=\"#11b5e4\" fontWeight=\"700\" textShadow=\"2px 2px 2px #272932\" >\r\n          Send-It\r\n        </Text>\r\n      </Box>\r\n      {/* Authentication tabs */}\r\n      <Box bg=\"rgba(0, 0, 0, 0.3)\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\" color=\"#272932\"  >\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          {/* Tab panels */}\r\n          <TabPanels>\r\n            <TabPanel>\r\n               {/* Login component */}\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n               {/* Signup component */}\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","// represents a single chat window\r\n\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ENDPOINT = \"http://localhost:5001\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  // State variables\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  // Animation options for Lottie animation\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  // Accessing selectedChat and user from ChatState context\r\n  const {\r\n    selectedChat,\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n  } = ChatState();\r\n\r\n  // Fetches messages for the selected chat\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Sends a new message\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Connect to the socket and set up event listeners\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch messages when the selected chat changes\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    // Listen for new messages from socket\r\n    socket.on(\"message received\", (newMessageReceived) => {\r\n      if (\r\n        !selectedChatCompare || // If chat is not selected or doesn't match the current chat\r\n        selectedChatCompare._id !== newMessageReceived.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageReceived)) {\r\n          setNotification([newMessageReceived, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageReceived]);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Handles typing event and emits typing and stop typing events to the socket\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work Sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"0, 0, 0, 0.2\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping && (\r\n                <Lottie\r\n                  options={defaultOptions}\r\n                  width={70}\r\n                  style={{ marginBottom: 15, marginLeft: 0 }}\r\n                />\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message...\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // Displayed when no chat is selected\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work Sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","// Check if the current message has the same sender as the next message and is not sent by the logged-in user\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;// Return a margin value of 33 if the conditions are met\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0; // Return a margin value of 0 if the conditions are met\r\n  else return \"auto\"; // Otherwise, return \"auto\" for automatic margin\r\n};\r\n// Check if the current message has a different sender than the next message and is not sent by the logged-in user\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\n// Return true if the conditions are met, indicating the same sender\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  ); // Return true if the conditions are met, indicating the last message\r\n};\r\n\r\n// Check if the current message has the same sender as the previous message\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id; // Return true if the conditions are met, indicating the same sender as the previous message\r\n\r\n};\r\n\r\n// Get the name of the sender based on the logged-in user and the other user(s) in the conversation\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\n// Get the full details of the sender (object) based on the logged-in user and the other user(s) in the conversation\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","// renders a modal for displaying user profile information\r\n\r\nimport { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure(); // Hook for modal state\r\n\r\n  return (\r\n    <>\r\n      {children ? ( // Render children if provided, otherwise render IconButton\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  // Accessing the user from ChatState context\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n             {/* Render the sender's avatar if it's a new sender or the last message */}\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {/* Render the message content */}\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","//displays a badge for a user in a group chat\r\n\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2} // Horizontal padding\r\n      py={1} // Vertical padding\r\n      borderRadius=\"lg\" // Rounded corner\r\n      m={1} // Margin\r\n      mb={2} // Bottom margin\r\n      variant=\"solid\" // Solid style variant\r\n      fontSize={12} // Font size\r\n      colorScheme=\"purple\" // Color scheme\r\n      cursor=\"pointer\" // Cursor style\r\n      onClick={handleFunction} // Click event handler\r\n    >\r\n      {user.name} {/* Display user's name */}\r\n      {admin === user._id && <span> (Admin)</span>} {/* Display \"(Admin)\" if the user is an admin */}\r\n      <CloseIcon pl={1} /> {/* Close icon */}\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","// represents an item in a user list. It displays the user's avatar, name, and email.\r\n\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  // Access user information from the ChatState context\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction} // Click event handler\r\n      cursor=\"pointer\" // Cursor style\r\n      bg=\"#E8E8E8\" // Background color\r\n      _hover={{\r\n        background: \"#38B2AC\", // Background color on hover\r\n        color: \"white\", // Text color on hover\r\n      }}\r\n      w=\"100%\" // Width\r\n      d=\"flex\" // Flex display\r\n      alignItems=\"center\" // Vertical alignment\r\n      color=\"black\" // Text color\r\n      px={3} // Horizontal padding\r\n      py={2} // Vertical padding\r\n      mb={2} // Bottom margin\r\n      borderRadius=\"lg\" // Rounded corner\r\n    >\r\n      <Avatar\r\n        mr={2} // Right margin\r\n        size=\"sm\" // Avatar size\r\n        cursor=\"pointer\" // Cursor style\r\n        name={user.name} // User name (for fallback text)\r\n        src={user.pic} // User avatar image source\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text> {/* Display user's name */}\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email} {/* Display user's email */}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","// represents a modal for updating a group chat. It allows the user to perform various actions such as renaming the chat, adding users to the chat, and removing users from the chat.\r\nimport { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  // State and function hooks\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  // Function to handle user search\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle renaming the group chat\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  // Function to handle adding a user to the group chat\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  // Function to handle removing a user from the group chat\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  // Rendering the component\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    // Render a container box for the chatbox\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"rgba(0, 0, 0, 0.3)\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      {/* Render the SingleChat component */}\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      {/* Render a series of skeleton loaders */}\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","// renders a modal for creating a group chat\r\n\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure(); // Hook for modal state\r\n  const [groupChatName, setGroupChatName] = useState(); // State variable for group chat name\r\n  const [selectedUsers, setSelectedUsers] = useState([]); // State variable for selected users\r\n  const [search, setSearch] = useState(\"\"); // State variable for search query\r\n  const [searchResult, setSearchResult] = useState([]); // State variable for search results\r\n  const [loading, setLoading] = useState(false); // State variable for loading state\r\n  const toast = useToast(); // Toast hook for displaying notifications\r\n\r\n  const { user, chats, setChats } = ChatState(); // Access user and chat data from context\r\n\r\n  // Add user to the selected users list\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  // Perform search based on query\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n   // Remove user from selected users list\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  // Submit group chat creation\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: Wade Wilson, Peter Parker, Logan\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  // State variables\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  // Function to fetch chats\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Fetch chats and set logged user on component mount or when fetchAgain changes\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"rgba(0, 0, 0, 0.4)\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n     \r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n      \r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            bg=\"#aa7bc3\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"rgba(0, 0, 0, 0.5)\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {/* Render each chat */}\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#aa7bc3C\" : \"#d9fff8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {/* Render the chat name or group chat name */}\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {/* Truncate the message content if it's too long */}\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          // Display a loading spinner if chats are still loading\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","// provides functionality for searching users, accessing chats, displaying notifications, and user actions. \r\n// Importing necessary dependencies and components\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  // State variables\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  // Accessing state and functions from ChatState context\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  // Handler for logging out the user\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // Function to handle search\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Function to access a chat\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Rendering the component\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"0, 0, 0, 0.1\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        \r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" bg=\"0, 0, 0, 0.1\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n         <Text fontSize=\"48px\" fontFamily=\"Montserrat\" color=\"#aa7bc3ff\" fontWeight=\"700\">\r\n          Send-It\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"0, 0, 0, 0.1\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false); // State for triggering fetching data again\r\n  const { user } = ChatState(); // Accessing chat-related state using the ChatState hook\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />} {/* Render the SideDrawer component if the user is logged in */}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\" bg=\"rgba(0, 0, 0, 0.3)\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />} {/* Render the MyChats component if the user is logged in */}\r\n        {user && (\r\n          <Chatbox bg=\"rgba(0, 0, 0, 0.3)\" fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )} {/* Render the Chatbox component if the user is logged in */}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./pages/Chatpage\";\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      {/* Route for the Homepage component */}\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      {/* Route for the Chatpage component */}\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider >\r\n    {/* Wrap the app with BrowserRouter for routing */}\r\n    <BrowserRouter>\r\n      {/* Wrap the app with ChatProvider to provide chat context */}\r\n      <ChatProvider>\r\n        {/* Render the App component */}\r\n\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}